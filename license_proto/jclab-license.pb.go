// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.1
// source: jclab-license.proto

package license_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TimecenseKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module       string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	Id           string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	VersionLimit int32  `protobuf:"varint,3,opt,name=version_limit,json=versionLimit,proto3" json:"version_limit,omitempty"`
	Key          []byte `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *TimecenseKey) Reset() {
	*x = TimecenseKey{}
	mi := &file_jclab_license_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimecenseKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimecenseKey) ProtoMessage() {}

func (x *TimecenseKey) ProtoReflect() protoreflect.Message {
	mi := &file_jclab_license_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimecenseKey.ProtoReflect.Descriptor instead.
func (*TimecenseKey) Descriptor() ([]byte, []int) {
	return file_jclab_license_proto_rawDescGZIP(), []int{0}
}

func (x *TimecenseKey) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *TimecenseKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TimecenseKey) GetVersionLimit() int32 {
	if x != nil {
		return x.VersionLimit
	}
	return 0
}

func (x *TimecenseKey) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type LicensePack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unix epoch time as milliseconds
	IssuedAt            int64             `protobuf:"varint,1,opt,name=issued_at,json=issuedAt,proto3" json:"issued_at,omitempty"`
	LicenseeName        string            `protobuf:"bytes,10,opt,name=licensee_name,json=licenseeName,proto3" json:"licensee_name,omitempty"`
	LicenseeEmail       string            `protobuf:"bytes,11,opt,name=licensee_email,json=licenseeEmail,proto3" json:"licensee_email,omitempty"`
	LicensedProduct     []string          `protobuf:"bytes,20,rep,name=licensed_product,json=licensedProduct,proto3" json:"licensed_product,omitempty"`
	TimecenseMaxVersion int32             `protobuf:"varint,30,opt,name=timecense_max_version,json=timecenseMaxVersion,proto3" json:"timecense_max_version,omitempty"`
	TimecenseKey        []*TimecenseKey   `protobuf:"bytes,31,rep,name=timecense_key,json=timecenseKey,proto3" json:"timecense_key,omitempty"`
	Attribute           map[string][]byte `protobuf:"bytes,100,rep,name=attribute,proto3" json:"attribute,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LicensePack) Reset() {
	*x = LicensePack{}
	mi := &file_jclab_license_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LicensePack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicensePack) ProtoMessage() {}

func (x *LicensePack) ProtoReflect() protoreflect.Message {
	mi := &file_jclab_license_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicensePack.ProtoReflect.Descriptor instead.
func (*LicensePack) Descriptor() ([]byte, []int) {
	return file_jclab_license_proto_rawDescGZIP(), []int{1}
}

func (x *LicensePack) GetIssuedAt() int64 {
	if x != nil {
		return x.IssuedAt
	}
	return 0
}

func (x *LicensePack) GetLicenseeName() string {
	if x != nil {
		return x.LicenseeName
	}
	return ""
}

func (x *LicensePack) GetLicenseeEmail() string {
	if x != nil {
		return x.LicenseeEmail
	}
	return ""
}

func (x *LicensePack) GetLicensedProduct() []string {
	if x != nil {
		return x.LicensedProduct
	}
	return nil
}

func (x *LicensePack) GetTimecenseMaxVersion() int32 {
	if x != nil {
		return x.TimecenseMaxVersion
	}
	return 0
}

func (x *LicensePack) GetTimecenseKey() []*TimecenseKey {
	if x != nil {
		return x.TimecenseKey
	}
	return nil
}

func (x *LicensePack) GetAttribute() map[string][]byte {
	if x != nil {
		return x.Attribute
	}
	return nil
}

var File_jclab_license_proto protoreflect.FileDescriptor

var file_jclab_license_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6a, 0x63, 0x6c, 0x61, 0x62, 0x2d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6b, 0x72, 0x2e, 0x6a, 0x63, 0x6c, 0x61, 0x62, 0x2e,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6d, 0x0a,
	0x0c, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xb0, 0x03, 0x0a,
	0x0b, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x65,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x32, 0x0a, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x13, 0x74, 0x69, 0x6d, 0x65, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x78, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x72,
	0x2e, 0x6a, 0x63, 0x6c, 0x61, 0x62, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4b, 0x65,
	0x79, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x50, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x64, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6b, 0x72, 0x2e, 0x6a, 0x63, 0x6c, 0x61, 0x62, 0x2e, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x1a, 0x3c, 0x0a, 0x0e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x5a, 0x0a, 0x16, 0x6b, 0x72, 0x2e, 0x6a, 0x63, 0x6c, 0x61, 0x62, 0x2e, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x0c, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x63, 0x2d, 0x6c, 0x61, 0x62, 0x2f, 0x6a, 0x63, 0x6c,
	0x61, 0x62, 0x2d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2d, 0x76, 0x32, 0x2f, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_jclab_license_proto_rawDescOnce sync.Once
	file_jclab_license_proto_rawDescData = file_jclab_license_proto_rawDesc
)

func file_jclab_license_proto_rawDescGZIP() []byte {
	file_jclab_license_proto_rawDescOnce.Do(func() {
		file_jclab_license_proto_rawDescData = protoimpl.X.CompressGZIP(file_jclab_license_proto_rawDescData)
	})
	return file_jclab_license_proto_rawDescData
}

var file_jclab_license_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_jclab_license_proto_goTypes = []any{
	(*TimecenseKey)(nil), // 0: kr.jclab.license.proto.TimecenseKey
	(*LicensePack)(nil),  // 1: kr.jclab.license.proto.LicensePack
	nil,                  // 2: kr.jclab.license.proto.LicensePack.AttributeEntry
}
var file_jclab_license_proto_depIdxs = []int32{
	0, // 0: kr.jclab.license.proto.LicensePack.timecense_key:type_name -> kr.jclab.license.proto.TimecenseKey
	2, // 1: kr.jclab.license.proto.LicensePack.attribute:type_name -> kr.jclab.license.proto.LicensePack.AttributeEntry
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_jclab_license_proto_init() }
func file_jclab_license_proto_init() {
	if File_jclab_license_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_jclab_license_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_jclab_license_proto_goTypes,
		DependencyIndexes: file_jclab_license_proto_depIdxs,
		MessageInfos:      file_jclab_license_proto_msgTypes,
	}.Build()
	File_jclab_license_proto = out.File
	file_jclab_license_proto_rawDesc = nil
	file_jclab_license_proto_goTypes = nil
	file_jclab_license_proto_depIdxs = nil
}
